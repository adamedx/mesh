#
# Author:: Adam Edwards (<adamed@opscode.com>)
# Copyright:: Copyright (c) 2013 Opscode, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'spec_helper'
require 'tmpdir'
require_relative '../../lib/mesh'

# These test cases exercise the Knife::Windows knife plugin's ability
# to download a bootstrap msi as part of the bootstrap process on
# Windows nodes. The test modifies the Windows batch file generated
# from an erb template in the plugin source in order to enable execution
# of only the download functionality contained in the bootstrap template.
# The test relies on knowledge of the fields of the template itself and 
# also on knowledge of the contents and structure of the Windows batch
# file generated by the template.
#
# Note that if the bootstrap template changes substantially, the tests
# should fail and will require re-implementation. If such changes
# occur, the bootstrap code should be refactored to explicitly expose
# the download functionality separately from other tasks to make the
# test more robust.
describe 'Mesh core .NET interop functionality' do

  before(:all) do
    # All file artifacts from this test will be written into this directory
    # @temp_directory = Dir.mktmpdir("bootstrap_test")

    # Location to which the download script will be modified to write
    # the downloaded msi
    # @local_file_download_destination = "#{@temp_directory}/chef-client-latest.msi"
  end

  after(:all) do
    # Clear the temp directory upon exit
    #if Dir.exists?(@temp_directory)
    #  FileUtils::remove_dir(@temp_directory)
    #end
  end

  describe "running on a Windows OS that supports powershell by default", :windows_default_powershell_only do
    before(:each) do
      clean_test_case      
    end

    it "constructs a Mesh class" do
      mesh = Mesh.new
    end

    it "Creates an instance" do
      mesh = Mesh.new

      mesh.Create("fun")
    end

    it "Lists methods on a type" do
      mesh = Mesh.new
      mesh.Create("fun")      
    end

    it "Lists methods on an instance" do
      mesh = Mesh.new
      mesh.List("fun")
    end

    it "Executes a method on a class" do
      mesh = Mesh.new
      mesh.Execute("fun", "objectid", "method", nil)
    end

    it "Gets an existing object" do
      mesh = Mesh.new
      mesh.Get("fun")
    end

    it "Deletes an existing object" do
      mesh = Mesh.new
      mesh.Delete("fun")
    end
    
  end

  # Remove file artifacts generated by individual test cases
  def clean_test_case
    # if File.exists?(@local_file_download_destination)
      # File.delete(@local_file_download_destination)
    # end
  end
  
end 
